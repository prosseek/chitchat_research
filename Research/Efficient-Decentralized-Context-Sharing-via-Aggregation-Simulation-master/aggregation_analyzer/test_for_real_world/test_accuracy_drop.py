import unittest
import sys
import os


from utils import *

class TestAccuracyDrop(unittest.TestCase):
    def setUp(self):
        pass

    #
    # Calculate received data
    #
    def run_to_get_accuracy_data(self, name, test_only_normal = False):
        def get_results_and_print(condition, kind):
            conditions = {"condition":condition, "name":name, "kind":kind} #, "timestamp":0}
            results = first_host_values_from_key(conditions, "% precision")
            print avg_lists(results)
            results = last_host_values_from_key(conditions, "% precision")
            print avg_lists(results)

        get_results_and_print("normal", "aggregates")
        if not test_only_normal: get_results_and_print("marked_sample", "aggregates")
        get_results_and_print("normal", "singles")

    def test_accuracy_real_world_intel_10(self):
        """Size for real world intel 10

        # aggr start and end
        [96.06888888888892, 94.59185185185184]
        [99.60351851851858, 98.3924074074074]
        # aggr (marked) start and end
        [96.06888888888892, 94.59185185185184]
        [99.6457407407408, 98.50351851851856]
        # single start and end
        [96.06888888888892, 94.59185185185184]
        [100.0, 100.0]

        -> Drop rate 3%

        [96.06888888888892, 94.59185185185184]
        [99.65759259259264, 98.46648148148152]

        [96.06888888888892, 94.59185185185184]
        [99.7938888888889, 98.575]

        [96.06888888888892, 94.59185185185184]
        [100.0, 100.0]

        -> Drop rate 8%

        [96.06888888888892, 94.59185185185184]
        [99.68037037037044, 98.36425925925924]

        [96.06888888888892, 94.59185185185184]
        [99.51962962962965, 98.27537037037035]
        # single still 100% because of the (possible) redundancies transferred
        [96.06888888888892, 94.59185185185184]
        [100.0, 100.0]

        -> Drop rate 33%
        [96.06888888888892, 94.59185185185184]
        [99.98537037037039, 98.22555555555557]
        [96.06888888888892, 94.59185185185184]
        [99.42777777777776, 97.7961111111111]
        [96.06888888888892, 94.59185185185184]
        [99.99074074074075, 99.98777777777778]

        -> Drop rate 50%
        [96.06888888888892, 94.59185185185184]
        [99.33666666666667, 97.47666666666666]
        [96.06888888888892, 94.59185185185184]
        [99.77166666666669, 97.66592592592595]
        [96.06888888888892, 94.59185185185184]
        [99.97685185185185, 99.96833333333332]
        """
        self.run_to_get_accuracy_data("real_world_intel_10_drop")


    def test_accuracy_real_world_intel_6(self):
        """Accuracy for real world intel 6

        [96.06888888888892, 94.59185185185184]
        [99.84629629629634, 98.35388888888889]
        # aggr (marked) start and end
        [96.06888888888892, 94.59185185185184]
        [99.68666666666674, 98.32055555555553]
        # single start and end
        [96.06888888888892, 94.59185185185184]
        [100.0, 100.0]

        --> 3% drop

        [96.06888888888892, 94.59185185185184]
        [99.63981481481484, 98.18833333333333]
        [96.06888888888892, 94.59185185185184]
        [99.99222222222222, 98.46499999999999]
        [96.06888888888892, 94.59185185185184]
        [99.99851851851852, 99.99851851851852]

        --> With 8% package drop rate

        [96.06888888888892, 94.59185185185184]
        [99.40314814814816, 98.02351851851853]

        [96.06888888888892, 94.59185185185184]
        [99.4561111111111, 97.91259259259266]
        # single 100 -> 99.87
        [96.06888888888892, 94.59185185185184]
        [99.87740740740738, 99.85611111111118]

        --> With 33% drop

        [96.06888888888892, 94.59185185185184]
        [99.40740740740733, 97.46962962962962]

        [96.06888888888892, 94.59185185185184]
        [99.57185185185179, 97.8814814814815]
        # single is even worse
        [96.06888888888892, 94.59185185185184]
        [99.00370370370368, 97.86240740740737]

        --> 50% drop

        [96.06888888888892, 94.59185185185184]
        [98.14796296296291, 96.37703703703703]
        [96.06888888888892, 94.59185185185184]
        [96.98351851851847, 95.83814814814816]
        [96.06888888888892, 94.59185185185184]
        [97.24629629629628, 95.91222222222223]

        """
        self.run_to_get_accuracy_data("real_world_intel_6_drop")


if __name__ == "__main__":
    unittest.main(verbosity=2)