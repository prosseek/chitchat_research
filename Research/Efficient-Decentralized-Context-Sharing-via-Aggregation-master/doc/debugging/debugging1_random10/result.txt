# DEBUGGING SNAPSHOT 1 [2013/09/20]

## Symptom

The result

    Size: based on the steps
    1:50(50) -> (g(0):c(50))
    2:206(256) -> (g(0):c(206))
    3:94(350) -> (g(0):c(94))

    Accuracy: agg
    STEP: 1 -> AVG 60.00%
    STEP: 2 -> AVG 98.00%
    STEP: 3 -> AVG 100.00%
    Accuracy: single
    STEP: 1 -> AVG 60.00%
    STEP: 2 -> AVG 98.00%
    STEP: 3 -> AVG 100.00%

    Maxhops
    [[3, 9, 0, 7], [7, 0, 6, 3]]

    Size: based on the steps
    1:50(50) -> (g(0):c(50))
    2:50(100) -> (g(50):c(0))
    3:35(135) -> (g(35):c(0))
    4:7(142) -> (g(7):c(0))

    Accuracy: agg
    STEP: 1 -> AVG 60.00%
    STEP: 2 -> AVG 86.00%
    STEP: 3 -> AVG 100.00%
    STEP: 4 -> AVG 100.00% <-- This is a bug (or feature?), 
          the communication should stop after step 3. Why keep going? 
    Why each node doesn't know that other nodes know already everything

    Accuracy: single
    STEP: 1 -> AVG 60.00%
    STEP: 2 -> AVG 84.00%
    STEP: 3 -> AVG 88.00%
    STEP: 4 -> AVG 88.00%

    Maxhops
    [[3, 9, 0, 7], [7, 0, 6, 3]]

 * The gain is 350/142, but as the max hop is 4, there should be only three hops for getting all the results. 
   -> This is a bug!
   
## analyze

At time step 4, (4) still sends the information to (5) and (7).

    (5) received Contexts from (4): [<G10|id(0)11|id(1)11|id(2)11|id(3)11|id(4)11|id(5)11|id(6)11|id(7)11|id(8)11|id(9)11|>]
    (7) received Contexts from (4): [<G10|id(0)11|id(1)11|id(2)11|id(3)11|id(4)11|id(5)11|id(6)11|id(7)11|id(8)11|id(9)11|>]

At time step 3, (3) has updated information

    outputBuffer - Buffer:Aggr:<G10|id(0)11|id(1)11|id(2)11|id(3)11|id(4)11|id(5)11|id(6)11|id(7)11|id(8)11|id(9)11|>
    oldOutputBuffer - Buffer:Aggr:<G9|id(0)11|id(1)11|id(2)11|id(4)11|id(5)11|id(6)11|id(7)11|id(8)11|id(9)11|>
    
And it says, it's got a new information "3".

### Bug found
At time step 2:

    **** Host 4 **************************
    DB:Single:[(id(0)11)(id(1)11)(id(2)11)(id(4)11)(id(5)11)(id(6)11)(id(7)11)(id(8)11)(id(9)11)]NPrime:[<G2|id(1)11|id(3)11|>]
    
Node 4 has NPrime (1,3), however it should not be NPrime as it has id(1) single element in it. 

This is the previous record:

    **** Host 4 **************************
    DB:Single:[(id(0)11)(id(2)11)(id(4)11)(id(5)11)(id(7)11)(id(8)11)]
    inputDictionary - {0:[(id(0)11)]|8:[(id(8)11)]|2:[(id(2)11)]|5:[(id(5)11)]|7:[(id(7)11)]}
    outputBuffer - Buffer:Aggr:<G6|id(0)11|id(2)11|id(4)11|id(5)11|id(7)11|id(8)11|>
    oldOutputBuffer - Buffer:Singles:[(id(4)11)]
    outputDictionary - {0:[<G6|id(0)11|id(2)11|id(4)11|id(5)11|id(7)11|id(8)11|>]|8:[<G6|id(0)11|id(2)11|id(4)11|id(5)11|id(7)11|id(8)11|>]|2:[<G6|id(0)11|id(2)11|id(4)11|id(5)11|id(7)11|id(8)11|>]|5:[<G6|id(0)11|id(2)11|id(4)11|id(5)11|id(7)11|id(8)11|>]|7:[<G6|id(0)11|id(2)11|id(4)11|id(5)11|id(7)11|id(8)11|>]}
    ***************************************
    
Node 4 has (0,2,5,7,8) as neighbors. Then, this is the next step (step 3). 

    **** Host 4 **************************
    DB:Single:[(id(0)11)(id(1)11)(id(2)11)(id(4)11)(id(5)11)(id(6)11)(id(7)11)(id(8)11)(id(9)11)]NPrime:[<G2|id(1)11|id(3)11|>]
    inputDictionary - {0:[<G7|id(0)11|id(4)11|id(5)11|id(6)11|id(7)11|id(8)11|id(9)11|>]|8:[<G6|id(0)11|id(1)11|id(2)11|id(3)11|id(4)11|id(8)11|>]|2:[<G6|id(1)11|id(2)11|id(3)11|id(4)11|id(6)11|id(8)11|>]|5:[<G6|id(0)11|id(1)11|id(4)11|id(5)11|id(7)11|id(9)11|>]|7:[<G4|id(0)11|id(4)11|id(5)11|id(7)11|>]}
    outputBuffer - Buffer:Aggr:<G9|id(0)11|id(1)11|id(2)11|id(4)11|id(5)11|id(6)11|id(7)11|id(8)11|id(9)11|>
    oldOutputBuffer - Buffer:Aggr:<G6|id(0)11|id(2)11|id(4)11|id(5)11|id(7)11|id(8)11|>
    outputDictionary - {0:[<G9|id(0)11|id(1)11|id(2)11|id(4)11|id(5)11|id(6)11|id(7)11|id(8)11|id(9)11|>]|8:[<G9|id(0)11|id(1)11|id(2)11|id(4)11|id(5)11|id(6)11|id(7)11|id(8)11|id(9)11|>]|2:[<G9|id(0)11|id(1)11|id(2)11|id(4)11|id(5)11|id(6)11|id(7)11|id(8)11|id(9)11|>]|5:[<G9|id(0)11|id(1)11|id(2)11|id(4)11|id(5)11|id(6)11|id(7)11|id(8)11|id(9)11|>]|7:[<G9|id(0)11|id(1)11|id(2)11|id(4)11|id(5)11|id(6)11|id(7)11|id(8)11|id(9)11|>]}
    ***************************************
    
Think about the inputs:

    024578
    {0:[<G7|id(0)11|id(4)11|id(5)11|id(6)11|id(7)11|id(8)11|id(9)11|>]| <-- 024578 => 6/9 as a new aggregation
     2:[<G6|id(1)11|id(2)11|id(3)11|id(4)11|id(6)11|id(8)11|>]|         <-- 024578 => 1/3/6 
     5:[<G6|id(0)11|id(1)11|id(4)11|id(5)11|id(7)11|id(9)11|>]|         <-- 024578 => 1/9
     7:[<G4|id(0)11|id(4)11|id(5)11|id(7)11|>]}                         <-- 024578 => No
     8:[<G6|id(0)11|id(1)11|id(2)11|id(3)11|id(4)11|id(8)11|>]|         <-- 024578 => 1/3
     
From this configuration, 6 is found from (1/3) and (1/3/6), and then 9 is recovered from (6/9)
And 1 is recovered from (1/9), and finally 3 **should be** recovered from (1/3). This is missing:

![Graph for random10][graph]

[graph]: ./graph.png "Logo Title Text 2"
     
## Bug Tracing
This is the result when I print out the first item.

    while n:
        ci = c.pop(0)
        supersetList = findSuperset(ci, c)
    
        print ci

    (id(2)10)
    (id(5)10)
    (id(0)10)
    (id(4)10)
    (id(8)10)
    (id(7)10)
    <G2|id(1)10|id(3)10|> <-- This should come later
    (id(6)10)
    (id(9)10)
    (id(1)10)
    
### Found!

The issue was that 

    ----
    <G2|id(1)10|id(3)10|>
    Found superset
    [<G3|id(1)10|id(3)10|id(6)10|>]
    ----
    (id(6)10)
    Found superset
    [<G2|id(6)10|id(9)10|>]
    ----
    (id(9)10)
    Found superset
    [<G2|id(1)10|id(9)10|>]
    ----
    (id(1)10)
    Found superset
    []
    ----
    
The thing is that when aggregated context is broken, the broken one (1/3) should be placed into 

## Fix the bug
[2013/09/20] 02:09pm uploaded to git *demerge code rewrite*. (50984c3)

## Rerun to get the result

    1:50(50) -> (g(0):c(50))
    2:50(100) -> (g(50):c(0))
    3:42(142) -> (g(42):c(0))
    4:2(144) -> (g(2):c(0)) <-- Maybe this should be 0

    Accuracy: agg
    STEP: 1 -> AVG 60.00%
    STEP: 2 -> AVG 95.00%
    STEP: 3 -> AVG 100.00%
    STEP: 4 -> AVG 100.00%
    Accuracy: single
    STEP: 1 -> AVG 60.00%
    STEP: 2 -> AVG 87.00%
    STEP: 3 -> AVG 90.00%
    STEP: 4 -> AVG 90.00%

    Maxhops
    [[3, 9, 0, 7], [7, 0, 6, 3]]
    
After the update in the algorithm, I finally get the three step results.
    
    Size: based on the steps
    1:50(50) -> (g(0):c(50))
    2:50(100) -> (g(50):c(0))
    3:41(141) -> (g(41):c(0))

    Accuracy: agg
    STEP: 1 -> AVG 60.00%
    STEP: 2 -> AVG 93.00%
    STEP: 3 -> AVG 100.00%
    Accuracy: single
    STEP: 1 -> AVG 60.00%
    STEP: 2 -> AVG 87.00%
    STEP: 3 -> AVG 90.00%

    Maxhops
    [[3, 9, 0, 7], [7, 0, 6, 3]]
